# coding: utf-8

"""
    NauticalStream(Workspace Microservice)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from post_sdk.models.post_source_type import PostSourceType
from post_sdk.models.post_status import PostStatus
from typing import Optional, Set
from typing_extensions import Self

class Post(BaseModel):
    """
    Post
    """ # noqa: E501
    id: StrictInt
    base62_id: Optional[StrictStr] = None
    status: Optional[PostStatus] = None
    created_by: Optional[UUID] = None
    workspace_id: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[datetime] = None
    flagged_at: Optional[datetime] = None
    published_at: Optional[datetime] = None
    description: Optional[StrictStr] = None
    view_count: Optional[StrictInt] = 0
    place_id: Optional[StrictStr] = None
    source_id: StrictStr
    source_type: PostSourceType
    __properties: ClassVar[List[str]] = ["id", "base62_id", "status", "created_by", "workspace_id", "created_at", "updated_at", "deleted_at", "flagged_at", "published_at", "description", "view_count", "place_id", "source_id", "source_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Post from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "source_id",
            "source_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if base62_id (nullable) is None
        # and model_fields_set contains the field
        if self.base62_id is None and "base62_id" in self.model_fields_set:
            _dict['base62_id'] = None

        # set to None if workspace_id (nullable) is None
        # and model_fields_set contains the field
        if self.workspace_id is None and "workspace_id" in self.model_fields_set:
            _dict['workspace_id'] = None

        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        # set to None if flagged_at (nullable) is None
        # and model_fields_set contains the field
        if self.flagged_at is None and "flagged_at" in self.model_fields_set:
            _dict['flagged_at'] = None

        # set to None if published_at (nullable) is None
        # and model_fields_set contains the field
        if self.published_at is None and "published_at" in self.model_fields_set:
            _dict['published_at'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if place_id (nullable) is None
        # and model_fields_set contains the field
        if self.place_id is None and "place_id" in self.model_fields_set:
            _dict['place_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Post from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "base62_id": obj.get("base62_id"),
            "status": obj.get("status"),
            "created_by": obj.get("created_by"),
            "workspace_id": obj.get("workspace_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "deleted_at": obj.get("deleted_at"),
            "flagged_at": obj.get("flagged_at"),
            "published_at": obj.get("published_at"),
            "description": obj.get("description"),
            "view_count": obj.get("view_count") if obj.get("view_count") is not None else 0,
            "place_id": obj.get("place_id"),
            "source_id": obj.get("source_id"),
            "source_type": obj.get("source_type")
        })
        return _obj


