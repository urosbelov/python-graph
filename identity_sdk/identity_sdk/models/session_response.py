# coding: utf-8

"""
    NauticalStream(workspace-service)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from identity_sdk.models.session_status import SessionStatus
from identity_sdk.models.session_type import SessionType
from typing import Optional, Set
from typing_extensions import Self

class SessionResponse(BaseModel):
    """
    SessionResponse
    """ # noqa: E501
    status: Optional[SessionStatus] = None
    device_id: Optional[StrictStr] = None
    browser: Optional[StrictStr] = None
    ip_address: Optional[StrictStr] = None
    user_agent: Optional[StrictStr] = None
    id: UUID
    type: SessionType
    user_id: Optional[UUID] = None
    flow_id: Optional[UUID] = None
    created_at: datetime
    updated_at: datetime
    is_expired: StrictBool
    valid_until: datetime
    __properties: ClassVar[List[str]] = ["status", "device_id", "browser", "ip_address", "user_agent", "id", "type", "user_id", "flow_id", "created_at", "updated_at", "is_expired", "valid_until"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SessionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if device_id (nullable) is None
        # and model_fields_set contains the field
        if self.device_id is None and "device_id" in self.model_fields_set:
            _dict['device_id'] = None

        # set to None if browser (nullable) is None
        # and model_fields_set contains the field
        if self.browser is None and "browser" in self.model_fields_set:
            _dict['browser'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ip_address'] = None

        # set to None if user_agent (nullable) is None
        # and model_fields_set contains the field
        if self.user_agent is None and "user_agent" in self.model_fields_set:
            _dict['user_agent'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if flow_id (nullable) is None
        # and model_fields_set contains the field
        if self.flow_id is None and "flow_id" in self.model_fields_set:
            _dict['flow_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SessionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "device_id": obj.get("device_id"),
            "browser": obj.get("browser"),
            "ip_address": obj.get("ip_address"),
            "user_agent": obj.get("user_agent"),
            "id": obj.get("id"),
            "type": obj.get("type"),
            "user_id": obj.get("user_id"),
            "flow_id": obj.get("flow_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "is_expired": obj.get("is_expired"),
            "valid_until": obj.get("valid_until")
        })
        return _obj


