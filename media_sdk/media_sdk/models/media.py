# coding: utf-8

"""
    NauticalStream(Workspace Microservice)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from uuid import UUID
from media_sdk.models.media_category import MediaCategory
from media_sdk.models.media_status import MediaStatus
from media_sdk.models.media_variant import MediaVariant
from typing import Optional, Set
from typing_extensions import Self

class Media(BaseModel):
    """
    Media
    """ # noqa: E501
    id: Optional[UUID] = None
    status: Optional[MediaStatus] = None
    variants: Optional[Dict[str, MediaVariant]] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[datetime] = None
    category: MediaCategory
    object_key: StrictStr
    owner_id: StrictStr
    mime_type: Optional[StrictStr] = None
    size_bytes: Optional[StrictInt] = None
    width: Optional[StrictInt] = None
    height: Optional[StrictInt] = None
    quality: Optional[Union[StrictFloat, StrictInt]] = None
    reference_count: Optional[StrictInt] = 1
    checksum: Optional[StrictStr] = None
    public_url: Optional[StrictStr] = None
    created_by: Optional[StrictStr] = None
    updated_by: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "status", "variants", "created_at", "updated_at", "deleted_at", "category", "object_key", "owner_id", "mime_type", "size_bytes", "width", "height", "quality", "reference_count", "checksum", "public_url", "created_by", "updated_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Media from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in variants (dict)
        _field_dict = {}
        if self.variants:
            for _key_variants in self.variants:
                if self.variants[_key_variants]:
                    _field_dict[_key_variants] = self.variants[_key_variants].to_dict()
            _dict['variants'] = _field_dict
        # set to None if variants (nullable) is None
        # and model_fields_set contains the field
        if self.variants is None and "variants" in self.model_fields_set:
            _dict['variants'] = None

        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        # set to None if mime_type (nullable) is None
        # and model_fields_set contains the field
        if self.mime_type is None and "mime_type" in self.model_fields_set:
            _dict['mime_type'] = None

        # set to None if size_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.size_bytes is None and "size_bytes" in self.model_fields_set:
            _dict['size_bytes'] = None

        # set to None if width (nullable) is None
        # and model_fields_set contains the field
        if self.width is None and "width" in self.model_fields_set:
            _dict['width'] = None

        # set to None if height (nullable) is None
        # and model_fields_set contains the field
        if self.height is None and "height" in self.model_fields_set:
            _dict['height'] = None

        # set to None if quality (nullable) is None
        # and model_fields_set contains the field
        if self.quality is None and "quality" in self.model_fields_set:
            _dict['quality'] = None

        # set to None if checksum (nullable) is None
        # and model_fields_set contains the field
        if self.checksum is None and "checksum" in self.model_fields_set:
            _dict['checksum'] = None

        # set to None if public_url (nullable) is None
        # and model_fields_set contains the field
        if self.public_url is None and "public_url" in self.model_fields_set:
            _dict['public_url'] = None

        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict['created_by'] = None

        # set to None if updated_by (nullable) is None
        # and model_fields_set contains the field
        if self.updated_by is None and "updated_by" in self.model_fields_set:
            _dict['updated_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Media from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "variants": dict(
                (_k, MediaVariant.from_dict(_v))
                for _k, _v in obj["variants"].items()
            )
            if obj.get("variants") is not None
            else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "deleted_at": obj.get("deleted_at"),
            "category": obj.get("category"),
            "object_key": obj.get("object_key"),
            "owner_id": obj.get("owner_id"),
            "mime_type": obj.get("mime_type"),
            "size_bytes": obj.get("size_bytes"),
            "width": obj.get("width"),
            "height": obj.get("height"),
            "quality": obj.get("quality"),
            "reference_count": obj.get("reference_count") if obj.get("reference_count") is not None else 1,
            "checksum": obj.get("checksum"),
            "public_url": obj.get("public_url"),
            "created_by": obj.get("created_by"),
            "updated_by": obj.get("updated_by")
        })
        return _obj


