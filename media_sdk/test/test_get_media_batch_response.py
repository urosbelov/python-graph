# coding: utf-8

"""
    NauticalStream(Workspace Microservice)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from media_sdk.models.get_media_batch_response import GetMediaBatchResponse

class TestGetMediaBatchResponse(unittest.TestCase):
    """GetMediaBatchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetMediaBatchResponse:
        """Test GetMediaBatchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetMediaBatchResponse`
        """
        model = GetMediaBatchResponse()
        if include_optional:
            return GetMediaBatchResponse(
                items = {
                    'key' : media_sdk.models.media.Media(
                        id = '', 
                        status = 'pending', 
                        variants = {
                            'key' : media_sdk.models.media_variant.MediaVariant(
                                name = '', 
                                format = '', 
                                width = 56, 
                                height = 56, 
                                size_bytes = 56, 
                                quality = 1.337, )
                            }, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        category = 'avatar', 
                        object_key = '', 
                        owner_id = '', 
                        mime_type = '', 
                        size_bytes = 56, 
                        width = 56, 
                        height = 56, 
                        quality = 1.337, 
                        reference_count = 56, 
                        checksum = '', 
                        public_url = '', 
                        created_by = '', 
                        updated_by = '', )
                    }
            )
        else:
            return GetMediaBatchResponse(
                items = {
                    'key' : media_sdk.models.media.Media(
                        id = '', 
                        status = 'pending', 
                        variants = {
                            'key' : media_sdk.models.media_variant.MediaVariant(
                                name = '', 
                                format = '', 
                                width = 56, 
                                height = 56, 
                                size_bytes = 56, 
                                quality = 1.337, )
                            }, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        category = 'avatar', 
                        object_key = '', 
                        owner_id = '', 
                        mime_type = '', 
                        size_bytes = 56, 
                        width = 56, 
                        height = 56, 
                        quality = 1.337, 
                        reference_count = 56, 
                        checksum = '', 
                        public_url = '', 
                        created_by = '', 
                        updated_by = '', )
                    },
        )
        """

    def testGetMediaBatchResponse(self):
        """Test GetMediaBatchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
